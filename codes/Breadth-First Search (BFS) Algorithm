from collections import deque

def bfs(graph, start, goal):
    visited = set()
    queue = deque([start])
    parent = {start: None}
    
    while queue:
        current_node = queue.popleft()
        
        if current_node == goal:
            path = []
            while current_node:
                path.append(current_node)
                current_node = parent[current_node]
            return path[::-1]  # Reversed path

        visited.add(current_node)

        for neighbor in graph[current_node]:
            if neighbor not in visited:
                visited.add(neighbor)
                parent[neighbor] = current_node
                queue.append(neighbor)
    
    return None

# Example usage:
graph = {
    'A': ['B', 'C'],
    'B': ['A', 'D', 'E'],
    'C': ['A', 'F'],
    'D': ['B'],
    'E': ['B', 'F'],
    'F': ['C', 'E']
}
start, goal = 'A', 'F'
solution = bfs(graph, start, goal)
if solution:
    print("Path:", solution)
else:
    print("No path found")
