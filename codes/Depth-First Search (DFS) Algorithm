def dfs(graph, start, goal, visited=None, parent=None):
    if visited is None:
        visited = set()
    if parent is None:
        parent = {start: None}
    
    visited.add(start)

    if start == goal:
        path = []
        while start is not None:
            path.append(start)
            start = parent[start]
        return path[::-1]

    for neighbor in graph[start]:
        if neighbor not in visited:
            parent[neighbor] = start
            result = dfs(graph, neighbor, goal, visited, parent)
            if result:
                return result
    return None

# Example usage:
graph = {
    'A': ['B', 'C'],
    'B': ['A', 'D', 'E'],
    'C': ['A', 'F'],
    'D': ['B'],
    'E': ['B', 'F'],
    'F': ['C', 'E']
}
start, goal = 'A', 'F'
solution = dfs(graph, start, goal)
if solution:
    print("Path:", solution)
else:
    print("No path found")
