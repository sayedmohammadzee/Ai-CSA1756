import heapq

# Function to calculate the Manhattan distance
def manhattan_distance(state, goal):
    distance = 0
    for i in range(3):
        for j in range(3):
            if state[i][j] != 0:
                x, y = divmod(goal.index(state[i][j]), 3)
                distance += abs(x - i) + abs(y - j)
    return distance

# Function to find the position of the blank (0) tile
def find_blank(state):
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                return i, j

# Function to generate the next possible states
def generate_states(state):
    i, j = find_blank(state)
    new_states = []
    moves = [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]
    
    for x, y in moves:
        if 0 <= x < 3 and 0 <= y < 3:
            new_state = [row[:] for row in state]
            new_state[i][j], new_state[x][y] = new_state[x][y], new_state[i][j]
            new_states.append(new_state)
    
    return new_states

# A* search algorithm
def a_star(start, goal):
    start_tuple = tuple(map(tuple, start))
    goal_tuple = tuple(map(tuple, goal))
    
    frontier = []
    heapq.heappush(frontier, (0, start_tuple))
    came_from = {start_tuple: None}
    cost_so_far = {start_tuple: 0}
    
    while frontier:
        _, current = heapq.heappop(frontier)
        
        if current == goal_tuple:
            path = []
            while current:
                path.append(current)
                current = came_from[current]
            return path[::-1]
        
        for next_state in generate_states([list(row) for row in current]):
            next_tuple = tuple(map(tuple, next_state))
            new_cost = cost_so_far[current] + 1
            
            if next_tuple not in cost_so_far or new_cost < cost_so_far[next_tuple]:
                cost_so_far[next_tuple] = new_cost
                priority = new_cost + manhattan_distance(next_state, [list(row) for row in goal_tuple])
                heapq.heappush(frontier, (priority, next_tuple))
                came_from[next_tuple] = current
    
    return None

# Main function
if __name__ == "__main__":
    start = [
        [1, 2, 3],
        [4, 0, 5],
        [7, 8, 6]
    ]
    goal = [
        [1, 2, 3],
        [4, 5, 6],
        [7, 8, 0]
    ]
    
    solution = a_star(start, goal)
    
    if solution:
        print("Solution found:")
        for state in solution:
            for row in state:
                print(row)
            print()
    else:
        print("No solution exists.")
