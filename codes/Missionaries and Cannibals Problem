from collections import deque

def is_valid(state):
    m, c, b = state
    if m < 0 or m > 3 or c < 0 or c > 3:
        return False
    if m < c and m > 0:
        return False
    if (3 - m) < (3 - c) and (3 - m) > 0:
        return False
    return True

def missionaries_cannibals():
    queue = deque([((3, 3, 1), [])])
    visited = set()
    while queue:
        (m, c, b), path = queue.popleft()
        if (m, c, b) == (0, 0, 0):
            return path + [(m, c, b)]
        if (m, c, b) in visited:
            continue
        visited.add((m, c, b))
        moves = [(-1, -1, -1), (-2, 0, -1), (0, -2, -1), (-1, 0, -1), (0, -1, -1)]
        for move in moves:
            next_state = (m + move[0], c + move[1], b + move[2])
            if is_valid(next_state):
                queue.append((next_state, path + [(m, c, b)]))

solution = missionaries_cannibals()
print("Solution:", solution)
